"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var graphql_language_service_interface_1 = require("graphql-language-service-interface");
var ts = require("typescript/lib/tsserverlibrary");
var index_1 = require("./ts-util/index");
var GraphQLLanguageServiceAdapter = (function () {
    function GraphQLLanguageServiceAdapter(_helper, opt) {
        if (opt === void 0) { opt = {}; }
        this._helper = _helper;
        this._tagCondition = null;
        this._logger = function () { };
        if (opt.logger)
            this._logger = opt.logger;
        if (opt.schema)
            this.updateSchema(opt.schema);
        if (opt.tag)
            this._tagCondition = opt.tag;
    }
    GraphQLLanguageServiceAdapter.prototype.updateSchema = function (schema) {
        try {
            this._schema = graphql_1.buildClientSchema(schema.data);
        }
        catch (err) {
            this._logger('Fail to build schema...');
            this._logger(err);
            this._schema = null;
        }
    };
    GraphQLLanguageServiceAdapter.prototype.getCompletionAtPosition = function (delegate, fileName, position) {
        if (!this._schema)
            return delegate(fileName, position);
        var node = this._helper.getNode(fileName, position);
        if (!node || node.kind !== 13 /* NoSubstitutionTemplateLiteral */) {
            return delegate(fileName, position);
        }
        if (this._tagCondition && !index_1.isTagged(node, this._tagCondition)) {
            return delegate(fileName, position);
        }
        var cursor = position - node.getStart();
        var baseLC = this._helper.getLineAndChar(fileName, node.getStart());
        var cursorLC = this._helper.getLineAndChar(fileName, position);
        var relativeLC = { line: cursorLC.line - baseLC.line, character: cursorLC.character - baseLC.character + 1 };
        var p = new SimplePosition(relativeLC);
        var text = node.getText().slice(1, cursor + 1); // remove the backquote char
        this._logger('Search text: "' + text + '" at ' + cursor + ' position');
        var gqlCompletionItems = graphql_language_service_interface_1.getAutocompleteSuggestions(this._schema, text, p);
        this._logger(JSON.stringify(gqlCompletionItems));
        return translateCompletionItems(gqlCompletionItems);
    };
    GraphQLLanguageServiceAdapter.prototype.getSemanticDiagnostics = function (delegate, fileName) {
        var _this = this;
        var errors = delegate(fileName) || [];
        if (!this._schema)
            return errors;
        var allTemplateStringNodes = this._helper.getAllNodes(fileName, function (n) { return n.kind === 13 /* NoSubstitutionTemplateLiteral */; });
        var nodes = allTemplateStringNodes.filter(function (n) {
            if (!_this._tagCondition)
                return true;
            return index_1.isTagged(n, _this._tagCondition);
        });
        var diagonosticsList = nodes.map(function (n) { return graphql_language_service_interface_1.getDiagnostics(n.getText().slice(1, n.getWidth() - 1)); }, this._schema);
        var result = errors.slice();
        diagonosticsList.forEach(function (diagnostics, i) {
            var node = nodes[i];
            var nodeLC = _this._helper.getLineAndChar(fileName, node.getStart());
            diagnostics.forEach(function (d) {
                var sl = nodeLC.line + d.range.start.line;
                var sc = d.range.start.line ? d.range.start.character : nodeLC.character + d.range.start.character + 1;
                var el = nodeLC.line + d.range.end.line;
                var ec = d.range.end.line ? d.range.end.character : nodeLC.character + d.range.end.character + 1;
                var start = ts.getPositionOfLineAndCharacter(node.getSourceFile(), sl, sc);
                var end = ts.getPositionOfLineAndCharacter(node.getSourceFile(), el, ec);
                result.push(translateDiagnostic(d, node.getSourceFile(), start, end - start));
            });
        });
        return result;
    };
    return GraphQLLanguageServiceAdapter;
}());
exports.GraphQLLanguageServiceAdapter = GraphQLLanguageServiceAdapter;
function translateCompletionItems(items) {
    var result = {
        isGlobalCompletion: false,
        isMemberCompletion: false,
        isNewIdentifierLocation: false,
        entries: items.map(function (r) {
            var kind = r.kind ? r.kind + '' : 'unknown';
            return {
                name: r.label,
                kindModifiers: 'declare',
                kind: kind,
                sortText: '0',
            };
        }),
    };
    return result;
}
function translateDiagnostic(d, file, start, length) {
    var code = typeof d.code === 'number' ? d.code : 9999;
    var messageText = d.message.split('\n')[0];
    return {
        code: code,
        messageText: messageText,
        category: d.severity,
        file: file,
        start: start,
        length: length,
    };
}
var SimplePosition = (function () {
    function SimplePosition(lc) {
        this.line = lc.line;
        this.character = lc.character;
    }
    SimplePosition.prototype.lessThanOrEqualTo = function (p) {
        if (this.line < p.line)
            return true;
        if (this.line > p.line)
            return false;
        if (this.line === p.line) {
            return this.character <= p.character;
        }
    };
    return SimplePosition;
}());
//# sourceMappingURL=graphql-language-service-adapter.js.map