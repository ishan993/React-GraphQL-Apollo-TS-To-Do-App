import * as ts from 'typescript/lib/tsserverlibrary';
export interface GraphQLLanguageServiceAdapterCreateOptions {
    schema?: any;
    logger?: (msg: string) => void;
    tag?: string;
}
export declare type GetCompletionAtPosition = ts.LanguageService['getCompletionsAtPosition'];
export declare type GetSemanticDiagnostics = ts.LanguageService['getSemanticDiagnostics'];
export interface ScriptSourceHelper {
    getAllNodes: (fileName: string, condition) => ts.Node[];
    getNode: (fileName: string, position) => ts.Node;
    getLineAndChar: (fileName: string, position) => ts.LineAndCharacter;
}
export declare class GraphQLLanguageServiceAdapter {
    private _helper;
    private _schema;
    private _tagCondition;
    constructor(_helper: ScriptSourceHelper, opt?: GraphQLLanguageServiceAdapterCreateOptions);
    updateSchema(schema: {
        data: any;
    }): void;
    getCompletionAtPosition(delegate: GetCompletionAtPosition, fileName: string, position: number): ts.CompletionInfo;
    getSemanticDiagnostics(delegate: GetSemanticDiagnostics, fileName: string): ts.Diagnostic[];
    private _logger;
}
