/**
 * @license
 * Copyright 2017 Palantir Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint");
var ts = require("typescript");
var guards_1 = require("../guards");
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        var walker = new JsxUseTranslationFunctionWalker(sourceFile, this.getOptions());
        return this.applyWithWalker(walker);
    };
    return Rule;
}(Lint.Rules.AbstractRule));
Rule.TRANSLATABLE_ATTRIBUTES = new Set(["placeholder", "title", "alt"]);
Rule.FAILURE_STRING = "String literals are disallowed as JSX. Use a translation function";
exports.Rule = Rule;
var JsxUseTranslationFunctionWalker = (function (_super) {
    __extends(JsxUseTranslationFunctionWalker, _super);
    function JsxUseTranslationFunctionWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JsxUseTranslationFunctionWalker.prototype.visitJsxElement = function (node) {
        // TODO: replace this method with visitJsxText for simpler implementation
        for (var _i = 0, _a = node.children; _i < _a.length; _i++) {
            var child = _a[_i];
            if (guards_1.nodeIsKind(child, ts.SyntaxKind.JsxText) && child.getText().trim() !== "") {
                this.addFailure(this.createFailure(child.getStart(), child.getWidth(), Rule.FAILURE_STRING));
            }
            if (guards_1.nodeIsKind(child, ts.SyntaxKind.JsxExpression)) {
                if (child.expression && child.expression.kind === ts.SyntaxKind.StringLiteral) {
                    this.addFailure(this.createFailure(child.getStart(), child.getWidth(), Rule.FAILURE_STRING));
                }
                if (child.expression && child.expression.kind === ts.SyntaxKind.FirstTemplateToken) {
                    this.addFailure(this.createFailure(child.getStart(), child.getWidth(), Rule.FAILURE_STRING));
                }
            }
        }
        _super.prototype.visitJsxElement.call(this, node);
    };
    JsxUseTranslationFunctionWalker.prototype.visitJsxAttribute = function (node) {
        if (Rule.TRANSLATABLE_ATTRIBUTES.has(node.name.text) && node.initializer) {
            if (guards_1.nodeIsKind(node.initializer, ts.SyntaxKind.StringLiteral)) {
                this.addFailure(this.createFailure(node.initializer.getStart(), node.initializer.getWidth(), "String literal is not allowed for value of " + node.name.text + ". Use a translation function"));
            }
            if (guards_1.nodeIsKind(node.initializer, ts.SyntaxKind.JsxExpression) &&
                guards_1.nodeIsKind(node.initializer.expression, ts.SyntaxKind.StringLiteral)) {
                this.addFailure(this.createFailure(node.initializer.getStart(), node.initializer.getWidth(), "String literal is not allowed for value of " + node.name.text + ". Use a translation function"));
            }
        }
        _super.prototype.visitJsxAttribute.call(this, node);
    };
    return JsxUseTranslationFunctionWalker;
}(Lint.RuleWalker));
