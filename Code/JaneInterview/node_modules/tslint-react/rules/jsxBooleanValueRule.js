/**
 * @license
 * Copyright 2017 Palantir Technologies, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var Lint = require("tslint");
var ts = require("typescript");
var OPTION_ALWAYS = "always";
var OPTION_NEVER = "never";
var BOOLEAN_RULE_VALUES = [OPTION_ALWAYS, OPTION_NEVER];
var BOOLEAN_RULE_OBJECT = {
    enum: BOOLEAN_RULE_VALUES,
    type: "string",
};
var Rule = (function (_super) {
    __extends(Rule, _super);
    function Rule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Rule.prototype.apply = function (sourceFile) {
        return this.applyWithWalker(new JsxBooleanValueWalker(sourceFile, this.getOptions()));
    };
    return Rule;
}(Lint.Rules.AbstractRule));
/* tslint:disable:object-literal-sort-keys */
Rule.metadata = {
    ruleName: "jsx-boolean-value",
    description: "Enforce boolean attribute notation in jsx.",
    optionsDescription: (_a = ["\n            One of the following two options must be provided:\n            * `\"", "\"` requires JSX boolean values to always be set.\n            * `\"", "\"` prevents JSX boolean values to be explicity set as `true`"], _a.raw = ["\n            One of the following two options must be provided:\n            * \\`\"", "\"\\` requires JSX boolean values to always be set.\n            * \\`\"", "\"\\` prevents JSX boolean values to be explicity set as \\`true\\`"], Lint.Utils.dedent(_a, OPTION_ALWAYS, OPTION_NEVER)),
    options: {
        type: "array",
        items: [BOOLEAN_RULE_OBJECT],
        minLength: 1,
        maxLength: 1,
    },
    optionExamples: [
        "[true, \"" + OPTION_ALWAYS + "\"]",
        "[true, \"" + OPTION_NEVER + "\"]",
    ],
    type: "style",
    typescriptOnly: false,
};
/* tslint:enable:object-literal-sort-keys */
Rule.NEVER_MESSAGE = "Value must be omitted for boolean attributes";
Rule.ALWAYS_MESSAGE = "Value must be set for boolean attributes";
exports.Rule = Rule;
var JsxBooleanValueWalker = (function (_super) {
    __extends(JsxBooleanValueWalker, _super);
    function JsxBooleanValueWalker() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    JsxBooleanValueWalker.prototype.visitJsxAttribute = function (node) {
        var initializer = node.initializer;
        if (initializer === undefined) {
            // if no option set, or explicitly set to "always"
            if (!this.hasOption(OPTION_NEVER)) {
                this.addFailure(this.createFailure(node.getStart(), node.getWidth(), Rule.ALWAYS_MESSAGE));
            }
        }
        else if (initializer.kind === ts.SyntaxKind.JsxExpression) {
            var isValueTrue = initializer.expression !== undefined
                && initializer.expression.kind === ts.SyntaxKind.TrueKeyword;
            if (isValueTrue && this.hasOption(OPTION_NEVER)) {
                this.addFailure(this.createFailure(node.getStart(), node.getWidth(), Rule.NEVER_MESSAGE));
            }
        }
    };
    return JsxBooleanValueWalker;
}(Lint.RuleWalker));
var _a;
