"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var path = require("path");
var SchamaJsonManager = (function () {
    function SchamaJsonManager(_info) {
        this._info = _info;
        this._onChanges = [];
        this._schemaPath = this._info.config.schema;
    }
    SchamaJsonManager.prototype.getSchema = function () {
        if (!this._schemaPath || typeof this._schemaPath !== 'string')
            return;
        try {
            var resolvedSchmaPath = this.getAbsoluteSchemaPath(this._info.project.getProjectRootPath(), this._schemaPath);
            this._log('Read schema from ' + resolvedSchmaPath);
            var isExists = this._info.languageServiceHost.fileExists(resolvedSchmaPath);
            if (!isExists)
                return;
            return JSON.parse(this._info.languageServiceHost.readFile(resolvedSchmaPath, 'utf-8'));
        }
        catch (e) {
            this._log('Fail to read schema file...');
            this._log(e.message);
            return;
        }
    };
    SchamaJsonManager.prototype.getAbsoluteSchemaPath = function (projectRootPath, schemaPath) {
        if (path.isAbsolute(schemaPath))
            return schemaPath;
        return path.resolve(projectRootPath, schemaPath);
    };
    SchamaJsonManager.prototype.registerOnChange = function (cb) {
        var _this = this;
        this._onChanges.push(cb);
        return function () {
            _this._onChanges = _this._onChanges.filter(function (x) { return x !== cb; });
        };
    };
    SchamaJsonManager.prototype.startWatch = function (interval) {
        var _this = this;
        if (interval === void 0) { interval = 100; }
        try {
            var resolvedSchmaPath = this.getAbsoluteSchemaPath(this._info.project.getProjectRootPath(), this._schemaPath);
            this._watcher = this._info.serverHost.watchFile(resolvedSchmaPath, function () {
                _this._log('Change schema file.');
                if (_this._onChanges.length) {
                    var schema_1 = _this.getSchema();
                    if (schema_1)
                        _this._onChanges.forEach(function (cb) { return cb(schema_1); });
                }
            }, interval);
        }
        catch (e) {
            this._log('Fail to read schema file...');
            this._log(e.message);
            return;
        }
    };
    SchamaJsonManager.prototype.closeWatch = function () {
        if (this._watcher)
            this._watcher.close();
    };
    SchamaJsonManager.prototype._log = function (msg) {
        this._info.project.projectService.logger.info(msg);
    };
    return SchamaJsonManager;
}());
exports.SchamaJsonManager = SchamaJsonManager;
//# sourceMappingURL=schema-json-manager.js.map